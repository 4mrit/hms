@page "/admin/tenants/{id:int}/edit"
@using System.Net.Http.Json
@using System.Text.Json
@using System.Collections.ObjectModel
@using thms.Media.API.Model
@using thms.Tenant.API.Model;
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@using WebApp.Services;
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http




@if(tenants != null){

    <form @onsubmit="DetailSubmit">
        <div class="form-group">
            <label>Name</label>
            <input type="text" @bind="name" placeholder="Name" />
            <br />
        </div>
        <div class="form-group">
            <label>Address</label>
            <input type="text" @bind="address" placeholder="Address" />
            <br />
        </div>
        <div class="form-group">
            <label>URL</label>
            <input type="text" @bind="url" placeholder="URL" />
            <br />
        </div>
        <div class="form-group">
            <label>Media Root Path</label>
            <input type="text" @bind="mediaRootPath" placeholder="Media Root Path" />
            <br />
        </div>
        <!-- Features -->
        <div class="form-group ">
            <lable>Features</lable>


            @if (getfeatures != null)
            {
                <div class="check-features">
                    @foreach (var feature in getfeatures)
                    {
                        <div>
                            <input type="checkbox" id="@($"feature{feature.Id}")" value="@($"feature{feature.Id}")" @bind="feature.IsChecked" />
                            <label for="@($"feature{feature.Id}")">@feature.Name</label>
                        </div>
                    }

                </div>
            }


        </div>

        <br />
        <div class="form-group">
            <label>Primary Color Hex Value</label>
            <input type="text" @bind="primaryColorHexValue" placeholder="Primary Color Hex Value" />
            <br />
        </div>
        <div class="form-group">
            <label>Secondary Color Hex Value</label>
            <input type="text" @bind="secondaryColorHexValue" placeholder="Secondary Color Hex Value" />
            <br />
        </div>
        <!-- Other form fields... -->
        <div class="form-group">
            <label>Primary Database</label>
            <input type="text" @bind="primaryDatabase" placeholder="Primary Database" />
            <br />
        </div>
        <div class="form-group">
            <label>Secondary Database</label>
            <input type="text" @bind="secondaryDatabase" placeholder="Secondary Database" />
            <br />
        </div>
        @* <button type="submit">Submit</button> *@
        <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">
                Save
        </Button>


    </form>
}

@code {
    [Parameter] public int id { get; set; }

    private HospitalTenant tenants;
    private HospitalTenant sendTenants = new HospitalTenant();


    public class FeatureViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public bool IsChecked { get; set; }
    }

    private FeatureViewModel[] getfeatures;
    object tDatabase = new List<TenantDatabase>();



    private ApiHelper helper;

    // public UserDetailEdit(ApiHelper helper)
    // {
    //     this.helper = helper;
    // }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            helper = new ApiHelper(ClientFactory, "MyHttpClient");   
            base.OnInitialized();

            var requestUri = "api/Tenants/Feature";
            getfeatures = await helper.GetRequest<FeatureViewModel[]>(requestUri);
            Console.WriteLine(getfeatures);

            // var httpClient = _httpClientFactory.CreateClient("MyHttpClient");

            // Api request to get list of all the features
            // getfeatures = await httpClient.GetFromJsonAsync<FeatureViewModel[]>(requestUri);

            // Api request to get Tenants Detail
            requestUri = $"/api/tenants/{id}";
            tenants = await helper.GetRequest<HospitalTenant>(requestUri);
            // await httpClient.GetFromJsonAsync<HospitalTenant>(requestUri);


            foreach(var feature in getfeatures)
            {
                foreach(var getfeaturedata in tenants.Features)
                {
                    if(feature.Id == getfeaturedata.Id)
                    {
                        feature.IsChecked = true;
                    }
                }
            }

            if(tenants != null)
            {

                name = tenants.Name;
                address = tenants.Address;
                url = tenants.Url;
                mediaRootPath = tenants.MediaRootPath;
                scheme = tenants.Scheme;
                primaryColorHexValue = tenants.Scheme.PrimaryColor.HexValue;
                secondaryColorHexValue = tenants.Scheme.SecondaryColor.HexValue;


                foreach(var database in tenants.Databases)
                {
                    Console.WriteLine(database.IsPrimary);
                    if(database.IsPrimary)
                    {
                        primaryDatabase = database.ConnectionString;
                    }
                    else
                    {
                        secondaryDatabase = database.ConnectionString;
                    }
                }

            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");

        }
    }


    private string name;
    private string address;
    private string url;
    private string mediaRootPath;
    private Scheme scheme;

    private string primaryColorHexValue;
    private string secondaryColorHexValue;
    private string primaryDatabase;
    private string secondaryDatabase;


    async private void DetailSubmit()
    {
        if(tenants != null)
        {

            Console.WriteLine("Helloworld");

            sendTenants.Name = name;
            sendTenants.Address = address;
            sendTenants.Url = url;
            sendTenants.MediaRootPath = mediaRootPath;

            sendTenants.Features = new List<Feature>();

            foreach(var featuredata in getfeatures)
            {
                if(featuredata.IsChecked)
                {
                    Feature newfeature = new Feature
                    {
                        Id = featuredata.Id,
                        Name = featuredata.Name
                    };
                    tenants.Features.Add(newfeature);


                }
            }

            sendTenants.Scheme = scheme;

            sendTenants.Scheme.PrimaryColor.HexValue = primaryColorHexValue;
            sendTenants.Scheme.SecondaryColor.HexValue = secondaryColorHexValue;

            sendTenants.Databases = new Collection<TenantDatabase>()
            {
                new TenantDatabase(){IsPrimary = true, ConnectionString = primaryDatabase},
                new TenantDatabase(){IsPrimary = false, ConnectionString= secondaryDatabase}

            };



            try
            {
                var requestUri = $"api/Tenants/{id}";
                // var httpClient = _httpClientFactory.CreateClient("MyHttpClient");
                Console.WriteLine(sendTenants);
                var response = await helper.PutRequest<HospitalTenant>(requestUri, sendTenants);
                // httpClient.PutAsJsonAsync( requestUri, sendTenants);
                NavigationManager.NavigateTo($"admin/tenants/{id}");

                Console.WriteLine(response);

            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");

            }
        }
        }

    
}
