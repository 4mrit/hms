@page "/admin/tenants/{id:int}/edit"
@using System.Net.Http.Json
@using System.Text.Json
@using hms.Tenant.API.Model;
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http




@if(tenants != null){

    <form @onsubmit="DetailSubmit">
    
        <div class="form-group">

        <lable>Name</lable>
        <input type ="text" id="name" @bind-value="tenants.Name" placeholder="Name" />
        <br />
        </div>
        <div class="form-group">
        <lable>Address</lable>
        <input type ="text" id="address" @bind-value = "tenants.Address"  placeholder="Address" />
        <br />
        </div>
        <div class="form-group">
        <lable>Url</lable>
        <input type ="text" id="url"  @bind-value ="tenants.Url" placeholder="Url" />
        <br />
        </div>
        <div class="form-group">
        <lable>Media Root Path</lable>
            <input type="text" id="mediaRootPath" @bind-value="tenants.MediaRootPath" placeholder="Media Root Path" />
        <br />
        </div>
        <!-- input ty"text"pe =e -->

    

        <div class="form-group">
        <lable>Primary Color Hex Value</lable>
            <input type="text" id="primaryColorHexValue" @bind-value="tenants.Scheme.PrimaryColor.HexValue" placeholder="Primary Color Hex Value" />
        <br />
        </div>


        <div class="form-group">
        <lable>Secondary Color Hex Value</lable>
            <input type="text" id="secondaryColorHexValue" @bind-value="tenants.Scheme.SecondaryColor.HexValue" placeholder="Secondary Color Hex Value" />
        <br />
        </div>


        <!-- Features -->
        <div class="form-group ">
            <lable>Features</lable>


                @if(getfeatures != null)
                {
                    <div class="check-features">
                            @foreach (var feature in getfeatures)
                            {
                                <div >
                                    <input type="checkbox" id="@($"feature{feature.Id}")" value="@($"feature{feature.Id}")" @bind = "feature.IsChecked" />
                                <label for="@($"feature{feature.Id}")">@feature.Name</label>
                                </div>
                            }
        
                    </div>
                }


        </div>

        <br />
    

        <div class="form-group">
        <lable>Primary Database</lable>
            <input type="text" id="PrimaryDatabase" @bind-value="tenants.PrimaryDatabase.ConnectionString" placeholder="Primary Database" />
        <br />
        </div>

        <div class="form-group">
        <lable>Secondary Database</lable>
            <input type="text" id="SecondaryDatabase" @bind-value="tenants.SecondaryDatabase.ConnectionString" placeholder="Secondary Database" />
        <br />
        </div>


        <button type="submit">Submit</button>
    </form>
}

@code {
    [Parameter] public int id { get; set; }

    private HospitalTenant tenants;


    [Inject]
    private IHttpClientFactory _httpClientFactory { get; set; }

    public class FeatureViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public bool IsChecked { get; set; }
    }

    private FeatureViewModel[] getfeatures;



    protected override async Task OnInitializedAsync()
    {
        try
        {
            var httpClient = _httpClientFactory.CreateClient("MyHttpClient");

            // Api request to get list of all the features
            var requestUri = "api/Tenants/Features";
            getfeatures = await httpClient.GetFromJsonAsync<FeatureViewModel[]>(requestUri);

            // Api request to get Tenants Detail
            requestUri = $"/api/tenants/{id}";
            tenants = await httpClient.GetFromJsonAsync<HospitalTenant>(requestUri);


            foreach(var feature in getfeatures)
            {
                foreach(var getfeaturedata in tenants.Features)
                {
                    if(feature.Id == getfeaturedata.Id)
                    {
                        feature.IsChecked = true;
                    }
                }
            }

            foreach (var feature in getfeatures)
            {
                Console.WriteLine(feature.IsChecked);
            }



        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");

        }
    }


    async private void DetailSubmit()
    {
        if(tenants != null)
        {

            Console.WriteLine("Helloworld");
            Console.WriteLine(tenants.Name);

            tenants.Features = null;
            tenants.Features = new List<Feature>();

            foreach(var featuredata in getfeatures)
            {
                if(featuredata.IsChecked)
                {
                    Feature newfeature = new Feature
                    {
                        Id = featuredata.Id,
                        Name = featuredata.Name
                    };
                    tenants.Features.Add(newfeature);


                }
            }


            foreach(var featurename in tenants.Features)
            {
                Console.WriteLine(featurename.Name);
            }

            try
            {
                var requestUri = $"api/Tenants/{id}";
                var httpClient = _httpClientFactory.CreateClient("MyHttpClient");

                using var response = await httpClient.PutAsJsonAsync( requestUri, tenants);
                Console.WriteLine(response);

            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");

            }
        }
        }

    
}
