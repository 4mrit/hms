// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hms.Tenant.API.Data;

#nullable disable

namespace Tenant.API.Migrations
{
    [DbContext(typeof(TenantContext))]
    [Migration("20240310024437_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("hms.Media.API.Model.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<string>("HexValue")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("hex_value");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("hms.Media.API.Model.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("media_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("path");

                    b.HasKey("Id");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("hms.Tenant.API.Model.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feature_id");

                    b.Property<int?>("HospitalTenantId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("HospitalTenantId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("hms.Tenant.API.Model.HospitalTenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("MediaRootPath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("media_root_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("PrimaryDatabaseId")
                        .HasColumnType("int");

                    b.Property<int?>("SchemeId")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryDatabaseId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryDatabaseId");

                    b.HasIndex("SchemeId");

                    b.HasIndex("SecondaryDatabaseId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("hms.Tenant.API.Model.Scheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("scheme_id");

                    b.Property<int>("PrimaryColorId")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryColorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryColorId");

                    b.HasIndex("SecondaryColorId");

                    b.ToTable("Schemes");
                });

            modelBuilder.Entity("hms.Tenant.API.Model.TenantDatabase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("database_id");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("conncection_string");

                    b.HasKey("Id");

                    b.ToTable("TenantDatabases");
                });

            modelBuilder.Entity("hms.Tenant.API.Model.Feature", b =>
                {
                    b.HasOne("hms.Tenant.API.Model.HospitalTenant", null)
                        .WithMany("Features")
                        .HasForeignKey("HospitalTenantId");
                });

            modelBuilder.Entity("hms.Tenant.API.Model.HospitalTenant", b =>
                {
                    b.HasOne("hms.Tenant.API.Model.TenantDatabase", "PrimaryDatabase")
                        .WithMany()
                        .HasForeignKey("PrimaryDatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hms.Tenant.API.Model.Scheme", "Scheme")
                        .WithMany()
                        .HasForeignKey("SchemeId");

                    b.HasOne("hms.Tenant.API.Model.TenantDatabase", "SecondaryDatabase")
                        .WithMany()
                        .HasForeignKey("SecondaryDatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryDatabase");

                    b.Navigation("Scheme");

                    b.Navigation("SecondaryDatabase");
                });

            modelBuilder.Entity("hms.Tenant.API.Model.Scheme", b =>
                {
                    b.HasOne("hms.Media.API.Model.Color", "PrimaryColor")
                        .WithMany()
                        .HasForeignKey("PrimaryColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hms.Media.API.Model.Color", "SecondaryColor")
                        .WithMany()
                        .HasForeignKey("SecondaryColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryColor");

                    b.Navigation("SecondaryColor");
                });

            modelBuilder.Entity("hms.Tenant.API.Model.HospitalTenant", b =>
                {
                    b.Navigation("Features");
                });
#pragma warning restore 612, 618
        }
    }
}
